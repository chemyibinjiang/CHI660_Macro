import sys
import os
import datetime as dt
import time

class CHI660e(object):
	"""docstring for CHI660e"""
	def __init__(self):
		super(CHI660e, self).__init__()
		self.path = os.getcwd()    #default file path
		self.fileoverride = True
		self.dummyon = False       # Control > Cell > Test with Internal Dummy Cell
	"""Buzzer control"""
	def beep(self, file, times:int, inter):
		print("for:"+str(times), file=file)
		print("  beep", file=file)
		print("  delay:"+str(inter), file=file)
		print("next", file=file)
		pass
	""" Add the title in the txt file and declare the file path """
	def init_output_txt(self, file):
		print("# Welcome to Macro Command!", file=file)
		print("# This script is generated by CHI660_macro.py by iCalcualte", file=file)
		print("# The source code in github.com/iCalculate/CHI660_Macro", file=file)
		print("folder:"+self.path, file=file)
		print(" ", file=file)
		pass
	""" Generate the MCR file which could directly open in the Macro control window"""
	def gene_mcr_file(self, file):
		#file.close()
		file.seek(0, 0)
		mcr_file=open('output.mcr','w')
		mcr_file.write('Hh\x00\x00'+ file.read())
		file.seek(0, 2)
		pass
	""" Similarly Hereinafter: initialization parameter and Define the domain """
	def init_lsv_tech(self, ei=0.0, ef=-0.1, v=0.01, si=0.001, qt=2.0, sens=1e-3):
		if -10.0<=ei<=10.0:
			self.lsv_ei = ei
			pass
		if -10.0<=ef<=10.0:
			self.lsv_ef = ef
			pass
		if 1e-6<=v<=2e4:
			self.lsv_v = v
			pass
		if 0.001<=si<=0.064:
			self.lsv_si = si
			pass
		if 0<=qt<=1e5:
			self.lsv_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.lsv_sens = sens
			pass
		pass
	""" Similarly Hereinafter: Generate the contral code and some other define """
	def run_lsv(self, file, filename:str='untitled', tsave=True, autosens=True, add_note=False):
		try:
			self.lsv_si
		except AttributeError:
			print("Initialize the variable first. use 'init_lsv_tech' function")
			sys.exit()
		else:
			if add_note:
				print("# LSV from "+str(self.lsv_ei)+"V to "+str(self.lsv_ef)+"V with "+ \
					str(self.lsv_v*1000)+"mV/s", file=file)
				pass
			print("tech:lsv",file=file)
			print("ei:"+str(self.lsv_ei),file=file)
			print("ef:"+str(self.lsv_ef),file=file)
			print("v:"+str(self.lsv_v),file=file)
			print("si:"+str(self.lsv_si),file=file)
			print("qt:"+str(self.lsv_qt),file=file)
			print("sens:"+str(self.lsv_sens),file=file)
			if autosens:
				print("tsave:IT-"+str(loop),file=file)
				pass
			print("run",file=file)
			print("save:IT-"+str(loop),file=file)
			if tsave:
				print("tsave:IT-"+str(loop),file=file)
				pass
			print(" ",file=file)
		pass

	def init_cv_tech(self, ei=0.0, eh=-0.1, el=-0.1, pn:str="p", v=0.01, cl:int=32, si=0.001, qt=2.0, sens=1e-3):
		if -10.0<=ei<=10.0:
			self.cv_ei = ei
			pass
		if -10.0<=eh<=10.0:
			self.cv_eh = eh
			pass
		if -10.0<=el<=10.0:
			self.cv_el = el
			pass
		if pn=='p' or pn=='n':
			self.cv_pn = pn
			pass
		if 1e-6<=v<=2e4:
			self.cv_v = v
			pass
		if 1<=cl<=10000:
			self.cv_cl = cl
			pass
		if 0.001<=si<=0.064:
			self.cv_si = si
			pass
		if 0<=qt<=1e5:
			self.cv_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.cv_sens = sens
			pass
		pass

	def run_cv(self, file, filename:str='untitled', tsave=True, autosens=True, add_note=False):
		try:
			self.cv_ei
		except NameError:
			print("Initialize the variable first. use 'init_cv_tech' function")
		else:
			if add_note:
				print("# CV from "+str(self.cv_el)+"V to "+str(self.cv_eh)+"V with "+ \
					str(self.cv_v*1000)+"mV/s for "+str(self.cv_cl)+" cycles", file=file)
				pass
			print("tech:cv",file=file)
			print("ei:"+str(self.cv_ei),file=file)
			print("eh:"+str(self.cv_eh),file=file)
			print("el:"+str(self.cv_el),file=file)
			print("cl:"+str(self.cv_cl),file=file)
			print("pn:"+str(self.cv_pn),file=file)
			print("v:"+str(self.cv_v),file=file)
			print("si:"+str(self.cv_si),file=file)
			print("qt:"+str(self.cv_qt),file=file)
			print("sens:"+str(self.cv_sens),file=file)
			if autosens:
				print("sutosens",file=file)
				pass
			print("run",file=file)
			print("save:"+filename,file=file)
			if tsave:
				print("tsave:"+filename,file=file)
				pass
			print(" ",file=file)
		pass

	def init_scv_tech(self, ei=0.0, ef=-0.1, incre=0.001, sw=0.001, prod=0.01, qt=2.0, sens=1e-3):
		if -10.0<=ei<=10.0:
			self.scv_ei = ei
			pass
		if -10.0<=ef<=10.0:
			self.scv_ef = ef
			pass
		if 0.001<=incre<=0.05:
			self.scv_incre = incre
			pass
		if 0.0001<=sw<=50:
			self.scv_sw = sw
			pass
		if 0.001<=prod<=2500:
			self.scv_prod = prod
			pass
		if 0<=qt<=1e5:
			self.scv_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.scv_sens = sens
			pass
		pass

	def run_scv(self, file, filename:str='untitled', tsave=True, autosens=True, add_note=False):
		try:
			self.scv_ei
		except NameError:
			print("Initialize the variable first. use 'init_scv_tech' function")
		else:
			if add_note:
				print("# scv from "+str(self.scv_ei)+"V to "+str(self.scv_ef)+"V with "+ \
					str(self.scv_incre*1000)+"V step for "+str(self.scv_prod)+" period", file=file)
				pass
			print("tech:scv",file=file)
			print("ei:"+str(self.scv_ei),file=file)
			print("ef:"+str(self.scv_ef),file=file)
			print("incre:"+str(self.scv_incre),file=file)
			print("sw:"+str(self.scv_sw),file=file)
			print("prod:"+str(self.scv_prod),file=file)
			print("sens:"+str(self.scv_sens),file=file)
			print("qt:"+str(self.scv_qt),file=file)
			if autosens:
				print("sutosens",file=file)
				pass
			print("run",file=file)
			print("save:"+filename,file=file)
			if tsave:
				print("tsave:"+filename,file=file)
				pass
			print(" ",file=file)
		pass

	def init_it_tech(self, ei=0.0, si=0.1, st=600, qt=2.0, sens=1e-3):
		if -10.0<=ei<=10.0:
			self.it_ei = ei
			pass
		if 2e-6<=si<=50.0:
			self.it_si = si
			pass
		if 0.001<=st<=5e5:
			self.it_st = st
			pass
		if 0<=qt<=1e5:
			self.it_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.it_sens = sens
			pass
		pass

	def run_it(self, file, filename:str='untitled', tsave=True, autosens=True, add_note=False):
		try:
			self.it_ei
		except NameError:
			print("Initialize the variable first. use 'init_it_tech' function")
		else:
			if add_note:
				print("# it at "+str(self.it_ei)+"V with "+str(self.it_si)+"s inter for "+ \
					str(self.it_st)+"s.", file=file)
				pass
			print("tech:it",file=file)
			print("ei:"+str(self.it_ei),file=file)
			print("si:"+str(self.it_si),file=file)
			print("st:"+str(self.it_st),file=file)
			print("qt:"+str(self.it_qt),file=file)
			print("sens:"+str(self.it_sens),file=file)
			if autosens:
				print("sutosens",file=file)
				pass
			print("run",file=file)
			print("save:"+filename,file=file)
			if tsave:
				print("tsave:"+filename,file=file)
				pass
			print(" ",file=file)
		pass

	def init_be_tech(self, ei=0.0, iratio=0.5, si=0.1, bepe=-0.1, bept=2):
		if -10.0<=ei<=10.0:
			self.be_ei = ei
			pass
		if 0<=iratio<=100:
			self.be_iratio = iratio
			pass
		if 2e-6<=si<=50:
			self.be_si = si
			pass
		if -10<=bepe<=10:
			self.be_bepe = bepe
			pass
		if 0<=bept<=1e5:
			self.be_bept = bept
			pass
		pass

	def run_be(self, file, filename:str='untbeled', tsave=True, autosens=True, add_note=False):
		try:
			self.be_ei
		except NameError:
			print("Inbeialize the variable first. use 'inbe_be_tech' function")
		else:
			if add_note:
				print("# be at "+str(self.be_ei)+"V with "+str(self.be_si)+"s inter till "+ \
					str(self.be_iratio)+"%.", file=file)
				pass
			print("tech:be",file=file)
			print("ei:"+str(self.be_ei),file=file)
			print("iratio:"+str(self.be_iratio),file=file)
			print("si:"+str(self.be_si),file=file)
			print("bepe:"+str(self.be_bepe),file=file)
			print("bept:"+str(self.be_bept),file=file)
			if autosens:
				print("sutosens",file=file)
				pass
			print("run",file=file)
			print("save:"+filename,file=file)
			if tsave:
				print("tsave:"+filename,file=file)
				pass
			print(" ",file=file)
		pass

	def init_imp_tech(self, ei=0.0, fl=1.0, fh=1e5, amp=0.005, qt=2.0, sens=1e-3, impsens:list=None, ibias=0.0, cl:list=None):
		if -10.0<=ei<=10.0:
			self.imp_ei = ei
			pass
		if 2e-4<=fl<=1e4:
			self.imp_fl = fl
			pass
		if 2e-3<=fh<=1e5:
			self.imp_fh = fh
			pass
		if 1e-3<=amp<=0.4:
			self.imp_amp = amp
			pass
		if 0<=qt<=1e5:
			self.imp_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.imp_sens = sens
			pass
		pass

	def run_imp(self, file, filename:str='untbeled', tsave=True, autosens=True, add_note=False):
		try:
			self.imp_ei
		except NameError:
			print("Inbeialize the variable first. use 'inimp_imp_tech' function")
		else:
			if add_note:
				print("# imp at "+str(self.imp_ei)+"V from "+str(self.imp_fl)+"Hz to "+ \
					str(self.imp_fh)+"Hz.", file=file)
				pass
			print("tech:imp",file=file)
			print("ei:"+str(self.imp_ei),file=file)
			print("fl:"+str(self.imp_fl),file=file)
			print("fh:"+str(self.imp_fh),file=file)
			print("amp:"+str(self.imp_amp),file=file)
			print("qt:"+str(self.imp_qt),file=file)
			print("sens:"+str(self.imp_sens),file=file)
			if autosens:
				print("sutosens",file=file)
				pass
			print("run",file=file)
			print("save:"+filename,file=file)
			if tsave:
				print("tsave:"+filename,file=file)
				pass
			print(" ",file=file)
		pass



#time_start=time.time()    #Gets the run time pointer
print("MacroGen run from:"+dt.datetime.now().strftime('%F %T'))
file=open('output.txt','w+')     #creating a read-write text document

chi = CHI660e()    #inital the class variables
print("Output path is: "+chi.path)
chi.init_output_txt(file)
chi.beep(file,3,1)

CycleNum = (0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5)  #inital scan rate list
for loop in CycleNum:
	chi.init_cv_tech(ei=-0.15, eh=-0.25, el=-0.15, v=loop)   #inital cv variables
	chi.run_cv(file, 'CV-'+str(loop), add_note=True)  #generate the code

	chi.init_lsv_tech()   #inital cv variables
	chi.run_lsv(file, 'LSV-'+str(loop), add_note=True)

	chi.init_scv_tech()   #inital cv variables
	chi.run_scv(file, 'SCV-'+str(loop), add_note=True)

	chi.init_it_tech()   #inital cv variables
	chi.run_it(file, 'IT-'+str(loop), add_note=True)

	chi.init_be_tech()   #inital cv variables
	chi.run_be(file, 'BE-'+str(loop), add_note=True)

	chi.init_imp_tech()   #inital cv variables
	chi.run_imp(file, 'IMP-'+str(loop), add_note=True)

chi.gene_mcr_file(file)     #Build your macro file. Note: it will make seek point to the end
#time_end=time.time()    #Gets the run completion time pointer
#print('Totally Cost:',time_end-time_start)   #Show the totally run time
