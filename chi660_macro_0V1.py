import sys
import os
import datetime as dt
import time

class CHI660e(object):
	"""docstring for CHI660e"""
	def __init__(self):
		super(CHI660e, self).__init__()
		self.path = os.getcwd()    #default file path
		self.fileoverride = True
		self.dummyon = False       # Control > Cell > Test with Internal Dummy Cell

	def beep(self, file, times:int, inter):
		print("for:"+str(times),file=file)
		print("  beep",file=file)
		print("  delay:"+str(inter),file=file)
		print("next")
		pass

	def init_output_txt(self, file):
		print("# Welcome to Macro Command!",file=file)
		print("# This script is generated by CHI660_macro.py by iCalcualte",file=file)
		print("# The source code in github.com/iCalculate/CHI660_Macro",file=file)
		print("folder:"+self.path,file=file)
		print(" ",file=file)
		pass

	def gene_mcr_file(self, file):
		#file.close()
		file.seek(0, 0)
		mcr_file=open('output.mcr','w')
		mcr_file.write('Hh\x00\x00'+ file.read())
		file.seek(0, 2)
		pass

	def init_lsv_tech(self, ei=0.0, ef=-0.1, v=0.01, si=0.001, qt=2.0, sens=1e-3):
		if -10.0<=ei<=10.0:
			self.lsv_ei = ei
			pass
		if -10.0<=ef<=10.0:
			self.lsv_ef = ef
			pass
		if 1e-6<=v<=2e4:
			self.lsv_v = v
			pass
		if 0.001<=si<=0.064:
			self.lsv_si = si
			pass
		if 0<=qt<=1e5:
			self.lsv_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.lsv_sens = sens
			pass
		pass

	def run_lsv(self, file, filename='untitled', tsave=True, autosens=True, add_note=False):
		try:
			self.lsv_si
		except AttributeError:
			print("Initialize the variable first. use 'init_lsv_tech' function")
			sys.exit()
		else:
			if add_note:
				print("# LSV from "+str(self.lsv_ei)+"V to "+str(self.lsv_ef)+"V with "+ \
					str(self.lsv_v*1000)+"mV/s", file=file)
				pass
			print()
			print("tech:lsv",file=file)
			print("ei:"+str(self.lsv_ei),file=file)
			print("ef:"+str(self.lsv_ef),file=file)
			print("v:"+str(self.lsv_v),file=file)
			print("si:"+str(self.lsv_si),file=file)
			print("qt:"+str(self.lsv_qt),file=file)
			if autosens:
				print("tsave:IT-"+str(loop),file=file)
				pass
			print("run",file=file)
			print("save:IT-"+str(loop),file=file)
			if tsave:
				print("tsave:IT-"+str(loop),file=file)
				pass
			print(" ",file=file)
		pass

	def init_cv_tech(self, ei=0.0, eh=-0.1, el=-0.1, pn:str="p", v=0.01, cl:int=32, si=0.001, qt=2.0, sens=1e-3):
		if -10.0<=ei<=10.0:
			self.cv_ei = ei
			pass
		if -10.0<=eh<=10.0:
			self.cv_eh = eh
			pass
		if -10.0<=el<=10.0:
			self.cv_el = el
			pass
		if pn=='p' or pn=='n':
			self.cv_pn = pn
			pass
		if 1e-6<=v<=2e4:
			self.cv_v = v
			pass
		if 1<=cl<=10000:
			self.cv_cl = cl
			pass
		if 0.001<=si<=0.064:
			self.cv_si = si
			pass
		if 0<=qt<=1e5:
			self.cv_qt = qt
			pass
		if 1e-12<=sens<=0.1:
			self.cv_sens = sens
			pass
		pass

	def run_cv(self, file, filename:str='untitled', tsave=True, autosens=True, add_note=False):
		try:
			self.cv_ei
		except NameError:
			print("Initialize the variable first. use 'init_cv_tech' function")
		else:
			if add_note:
				print("# CV from "+str(self.cv_el)+"V to "+str(self.cv_eh)+"V with "+ \
					str(self.cv_v*1000)+"mV/s for "+str(self.cv_cl)+" cycles", file=file)
				pass
			print("tech:cv",file=file)
			print("ei:"+str(self.cv_ei),file=file)
			print("eh:"+str(self.cv_eh),file=file)
			print("el:"+str(self.cv_el),file=file)
			print("cl:"+str(self.cv_cl),file=file)
			print("pn:"+str(self.cv_pn),file=file)
			print("v:"+str(self.cv_v),file=file)
			print("si:"+str(self.cv_si),file=file)
			print("qt:"+str(self.cv_qt),file=file)
			if autosens:
				print("sutosens",file=file)
				pass
			print("run",file=file)
			print("save:"+filename,file=file)
			if tsave:
				print("tsave:"+filename,file=file)
				pass
			print(" ",file=file)
		pass

		
time_start=time.time()    #Gets the run time pointer
print("MacroGen run from:"+dt.datetime.now().strftime('%F %T'))
file=open('output.txt','w+')

chi = CHI660e()    #inital the class variables
print("Output path is: "+chi.path)
chi.init_output_txt(file)

CycleNum = (0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5)
for loop in CycleNum:
	chi.init_cv_tech(ei=-0.15, eh=-0.25, el=-0.15, v=loop)
	chi.run_cv(file, 'CV-'+str(loop), add_note=True)

chi.gene_mcr_file(file)     #Build your macro file. Note: it will make seek point to the end
time_end=time.time()    #Gets the run completion time pointer
print('Totally Cost:',time_end-time_start)   #Show the totally run time